const { sendBotMessage } = require("../../../messageSender");
const {
  setUserStage,  
  appendToConversation
} = require("../../../redisService");
const { informacoesPayjoy } = require("../../../utils/documentacoes/informacoesPayjoy");
const { gatilhosEmocionaisVertex } = require('../../../utils/documentacoes/gatilhosEmocionais');
const { tomDeVozVertex } = require('../../../utils/documentacoes/tomDeVozVertex');
const { obje√ß√µesVertexBoleto } = require("../../../utils/documentacoes/objecoesBoleto");;
const { handlers: handlersDemonstracaoDetalhadaBoleto, agenteDeDemonstracaoDetalhadaBoleto } = require("../../../GerenciadorDeRotinas/GerenciadorDeDemonstracao/agenteDeDemonstracaoDetalhadaBoleto");
const { getConversation } = require("../../../HistoricoDeConversas/conversationManager");
const { getAllCelulareBoleto } = require('../../../dbService')
const { sanitizarEntradaComQuoted } = require("../../../utils/utilitariosDeMensagem/sanitizarEntradaComQuoted");
const { prepararContextoDeModelosRecentes } = require("../../../utils/utilitariosDeMensagem/prepararContextoDeModelosRecentes");
const OpenAI = require("openai");
const { agenteDeDemonstracaoPorNomePorBoleto } = require("./agenteDeDemonstracaoPorNomePorBoleto");
const { enviarResumoParaNumeros } = require("../../../utils/enviarResumoParaNumeros");
const { registrarTagModeloConfirmado } = require("../../../ServicesKommo/registrarTagModeloConfirmado");
require("dotenv").config();
const { atualizarValorVendaDoLead } = require("../../../ServicesKommo/atualizarValorVendaDoLead");
const { pipelineAtendimentoHumanoBoleto } = require("../../../ServicesKommo/pipelineAtendimentoHumanoBoleto");



const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const obterModelosDoBling = async () => {
  try {
    const celulares = await getAllCelulareBoleto();

    const termosIgnorados = [
      "BLACK", "WHITE", "BLUE", "GREEN", "GOLD", "PURPLE", "SILVER", "CORAL",
      "MIDNIGHT", "OCEAN", "TEAL", "AZUL", "VERDE", "LAVENDER", "VOYAGE",
      "MARBLE", "STORM", "LIGHTNING", "SPARKLE", "DARK", "LIME", "STAR", "STARRY",
      "OC√âANO", "ROM", "RAM"
    ];

    const normalizeNome = (nome) => nome
      .replace(/^smartphone\s*/i, "")
      .replace(/[^\w\s]/gi, '')
      .trim()
      .split(/\s+/)
      .filter(p => !termosIgnorados.includes(p.toUpperCase()))
      .join(" ")
      .toLowerCase()
      .trim();

    const mapaUnico = new Map();

    for (const c of celulares) {
      const chave = normalizeNome(c.nome);
      if (!mapaUnico.has(chave)) {
        mapaUnico.set(chave, {
          nome: c.nome,
          preco: c.preco,
          descricaoCurta: c.descricao,
          imagemURL: c.imageURL,
          precoParcelado: c.precoParcelado,
          fraseImpacto: c.fraseImpacto,
          subTitulo: c.subTitulo
        });
      }
    }

    const listaParaPrompt = Array.from(mapaUnico.values());

    console.log("üì¶ Modelos carregados do banco:");
    listaParaPrompt.forEach(m => console.log("-", m.nome));

    return listaParaPrompt;
  } catch (err) {
    console.error("‚ùå Erro ao carregar modelos do banco:", err);
    return [];
  }
};

const calcularSimilaridadePorEmbeddings = async (entrada, modelos) => {
  const entradaEmbedding = await openai.embeddings.create({
    model: "text-embedding-3-small",
    input: entrada
  });

  const nomesModelos = modelos.map(m => m.nome);

  const modelosEmbedding = await openai.embeddings.create({
    model: "text-embedding-3-small",
    input: nomesModelos
  });

  const vetorEntrada = entradaEmbedding.data[0].embedding;

  const distancias = modelosEmbedding.data.map((item, i) => {
    const modeloOriginal = modelos[i];
    const vetorModelo = item.embedding;
    const score = vetorEntrada.reduce((acc, val, idx) => acc + val * vetorModelo[idx], 0);
    return {
      imagemURL: modeloOriginal.imagemURL,
      descricaoCurta: modeloOriginal.descricaoCurta,
      modelo: modeloOriginal.nome,
      preco: modeloOriginal.preco,
      subTitulo: modeloOriginal.subTitulo,
      fraseImpacto: modeloOriginal.fraseImpacto,
      precoParcelado: modeloOriginal.precoParcelado,
      score
    };
  });

  return distancias.sort((a, b) => b.score - a.score);
};

const agenteDeDemonstracaoPosDecisaoPorBoleto = async ({ sender, msgContent, pushName, quotedMessage }) => {
  try {
    await setUserStage(sender, "agente_de_demonstracao_pos_decisao_por_boleto");

    const entrada = await sanitizarEntradaComQuoted(sender, msgContent, quotedMessage);

    const { modelos, modelosConfirmados, nomeUsuario, conversaCompleta } = await prepararContextoDeModelosRecentes(sender);

    // üéØ Tenta detectar similaridade de entrada com algum modelo
    const listaModelos = await obterModelosDoBling();
    const similares = await calcularSimilaridadePorEmbeddings(entrada, listaModelos);
    const maisProvavel = similares?.[0];

    if (maisProvavel?.score > 0.90) {
      console.log("‚úÖ Entrada casa fortemente com modelo:", maisProvavel.modelo);
      await appendToConversation(sender, {
        tipo: "deliberacao_toa",
        conteudo: {
          acao: "demonstracaoDetalhadaBoleto",
          motivo: `Cliente mencionou ${maisProvavel.modelo} com alta similaridade`,
          argumento: { modeloMencionado: maisProvavel.modelo }
        },
        timestamp: new Date().toISOString()
      });

      return await handlers.demonstracaoDetalhadaBoleto(sender, {
        modeloMencionado: maisProvavel.modelo
      }, { msgContent: entrada });
    }

    // ü§ñ Delibera√ß√£o TOA
    const deliberarPossibilidades = async () => {
      const prompt = `
      üìú Hist√≥rico da conversa:
        ${conversaCompleta}
      
      üß† √öltima mensagem do cliente:
      "${entrada}"
      
      üì± Modelos apresentados:
      ${modelos.map(m => `‚û°Ô∏è *${m.nome}*\nüìù ${m.descricaoCurta}\nüíµ Pre√ßo: R$ ${m.preco.toFixed(2)}`).join("\n")}
      
      Nome do cliente: ${nomeUsuario}
      
      ‚úÖ Modelos confirmados anteriormente pelo cliente:
      ${modelosConfirmados.length > 0
        ? modelosConfirmados.map(m => `‚úîÔ∏è *${m}*`).join("\n")
        : "Nenhum ainda foi confirmado."}
      
      üß† √öltimo modelo confirmado:
      ${modelosConfirmados[modelosConfirmados.length - 1] || "nenhum"}
      
      üí° Quais s√£o as 3 possibilidades mais prov√°veis que o cliente quer com essa mensagem?
      
      1. **demonstracaoDetalhadaBoleto** ‚Üí quando estiver decidido ou indicar desejo de finalizar, mesmo que sem palavras exatas como "fechou". Ex: ‚Äúgostei muito desse‚Äù, ‚Äúacho que vou a√≠ amanh√£‚Äù, ‚Äúvamos ver esse a√≠‚Äù.
      1.1 - Se o cliente disser explicitamente que quer quer fechar a venda respondendo a pergunta do bot sobre visitar a loja. Escolha **demonstracaoDetalhadaBoleto**.
      2. Se o cliente fizer QUALQUER pergunta (mesmo sem ponto de interroga√ß√£o) ‚Äî como "√© bom?", "e esse?", "a c√¢mera √© boa?", "qual o pre√ßo?" ‚Äî **sobre qualquer um dos modelos apresentados anteriormente**, ou **sobre o √∫ltimo modelo confirmado**, interprete como d√∫vida ou indecis√£o. Escolha **responderDuvida**.
      
      ‚ö†Ô∏è Mesmo se o cliente mencionar o nome do modelo de novo ou compar√°-lo com outro lugar (ex: Mercado Livre), se esse modelo j√° foi apresentado, ainda assim escolha **responderDuvida**, pois o cliente j√° demonstrou interesse anteriormente.
      
      3. Se ele mencionar um modelo que **ainda n√£o foi apresentado na conversa** e **tamb√©m n√£o √© o √∫ltimo confirmado**, escolha **agenteDeDemonstracaoPorNomePorBoleto**. Isso indica que o cliente est√° abrindo uma nova inten√ß√£o.
      
       4. Se a mensagem do cliente **n√£o mencionar nenhum modelo**,  
e a d√∫vida parecer geral, filos√≥fica, comportamental ou fora do escopo dos modelos ‚Äî  
ex: "voc√™s vendem usados?", "e se der defeito?", "voc√™s tem loja f√≠sica?",  
"qual √© o diferencial de voc√™s?", "voc√™s s√£o confi√°veis?", "aceitam cart√£o?"  
‚Äî ent√£o entenda que √© uma d√∫vida gen√©rica.  
Escolha: **"responderDuvidasGenericas"**

      Retorne apenas isso:
      {
        "acao": "NOME_DA_ACAO",
        "motivo": "Texto explicando por que esta a√ß√£o foi escolhida",
        "argumento": {
          "nomeModelo": ""
        }
      }
      `;     

      const resp = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.9
      });

      const raw = resp.choices?.[0]?.message?.content || "";
      const jsonMatch = raw.match(/\{[\s\S]*\}/);
      if (!jsonMatch) return null;
      return JSON.parse(jsonMatch[0]);
    };

    const resultadoTOA = await deliberarPossibilidades();
    const acaoEscolhida = resultadoTOA?.acao;
    console.log("üéØ Resultado TOA:", JSON.stringify(resultadoTOA, null, 2));

    // üîê Grava modelo confirmado s√≥ se a TOA deliberar isso com clareza
if (acaoEscolhida === "agenteDeDemonstracaoPorNomePorBoleto") {
  const nomeModelo = resultadoTOA.argumento?.nomeModelo?.trim();
  if (nomeModelo && !modelosConfirmados.includes(nomeModelo)) {
    await appendToConversation(sender, {
      tipo: "modelo_confirmado",
      conteudo: nomeModelo,
      timestamp: new Date().toISOString()
    });
  }
}

  // ‚úÖ ‚¨áÔ∏è Aqui tratamos ambiguidade se a TOA escolher mostrarResumoModeloBoleto
if (acaoEscolhida === "demonstracaoDetalhadaBoleto") {
  let nomeModelo = resultadoTOA.argumento?.nomeModelo?.trim();
  console.log(`aqui dentro do pos decis√£o eu chamei o resumomodelo com esse modelo confirmado ${nomeModelo}`)

  if (!nomeModelo) {
    if (modelosConfirmados.length === 1) {
      // S√≥ um modelo confirmado ‚Üí usar direto
      nomeModelo = modelosConfirmados[0];
      resultadoTOA.argumento.nomeModelo = nomeModelo;

      await appendToConversation(sender, {
        tipo: "modelo_confirmado",
        conteudo: nomeModelo,
        timestamp: new Date().toISOString()
      });

    } else {
      // M√∫ltiplos modelos ou nenhum ‚Üí pedir confirma√ß√£o  
      await setUserStage(sender, "agente_de_demonstracao_detalhada_boleto");   

      await sendBotMessage(sender, `‚ö†Ô∏è ${nomeUsuario}, voc√™ falou que quer fechar, mas fiquei na d√∫vida sobre qual modelo exatamente.`);

      if (modelosConfirmados.length > 1) {
        const lista = modelosConfirmados.map(m => `‚úîÔ∏è *${m}*`).join("\n");
        await sendBotMessage(sender, `Voc√™ pode confirmar qual desses modelos quer?\n\n${lista}`);
      } else {
        await sendBotMessage(sender, `Voc√™ pode me dizer qual o modelo que quer fechar?`);
      }

      return; // ‚ö†Ô∏è IMPORTANTE: n√£o segue pro handler se ainda n√£o temos nomeModelo
    }
  }
  
 // ‚úÖ Garante que o modelo est√° gravado como confirmado
 if (!modelosConfirmados.includes(nomeModelo)) {
  await appendToConversation(sender, {
    tipo: "modelo_confirmado",
    conteudo: nomeModelo,
    timestamp: new Date().toISOString()
  });
}
  
}

// üé¨ Execu√ß√£o da a√ß√£o
if (handlers[acaoEscolhida]) {
  return await handlers[acaoEscolhida](sender, resultadoTOA.argumento || {}, {
    msgContent: entrada,
    quotedMessage,
    pushName,
    conversaCompleta
  });

  }

    return await sendBotMessage(sender, "‚ö†Ô∏è N√£o entendi sua escolha. Pode repetir?");
  } catch (error) {
    console.error("‚ùå Erro no agente TOA:", error);
    return await sendBotMessage(sender, "‚ö†Ô∏è Ocorreu um erro. Pode tentar de novo?");
  }
};

const handlers = {
  demonstracaoDetalhadaBoleto: async (sender, args, extras) => {
    await setUserStage(sender, "agente_de_demonstracao_detalhada_boleto");     
  
    const historico = await getConversation(sender);
  
    const modeloJaMostrado = historico.some((m) =>
      m?.tipo === "modelo_sugerido_json" &&
      typeof m?.conteudo?.nome === "string" &&
      m.conteudo.nome.toLowerCase() === args.nomeModelo.toLowerCase()
    );
  
    let modeloEscolhido;
  
    if (!modeloJaMostrado && args?.modeloMencionado) {
      const modelos = await getAllCelulareBoleto();
      modeloEscolhido = modelos.find(m =>
        m.nome.toLowerCase() === args.modeloMencionado.toLowerCase()
      );
    }
  
     // ‚úÖ Executa o resumo com ou sem modelo pr√©-exibido
  if (modeloEscolhido) {
    resultado = await handlersDemonstracaoDetalhadaBoleto.mostrarResumoModeloBoleto(
      sender,
      { nomeModelo: modeloEscolhido.nome },
      { modeloEscolhido }
    );
  } else {
    resultado = await handlersDemonstracaoDetalhadaBoleto.mostrarResumoModeloBoleto(
      sender,
      { nomeModelo: args.nomeModelo },
      {}
    );
  }

  // ‚úÖ Sempre envia o resumo ap√≥s mostrar
  await enviarResumoParaNumeros(sender);

  return resultado;
  },  
  responderDuvida: async (sender, args, extras) => {
    await setUserStage(sender, "agente_de_demonstracao_pos_decisao_por_boleto");

    // ‚úÖ Movimenta o lead para o pipeline de atendimento humano, se necess√°rio
  try {
    await pipelineAtendimentoHumanoBoleto(sender);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erro ao mover lead para atendimento humano:", err.message);
  }
  
    const { msgContent, quotedMessage } = extras;
    const entrada = await sanitizarEntradaComQuoted(sender, msgContent, quotedMessage);
  
    const { modelos, nomeUsuario, modelosConfirmados, conversaCompleta } =
      await prepararContextoDeModelosRecentes(sender);
  
    if (modelos.length === 0) {
      return await sendBotMessage(sender, "‚ö†Ô∏è Ainda n√£o te mostrei nenhum modelo pra comparar. Quer ver algumas op√ß√µes?");
    }
  
    let modeloFocado = null;
  
    if (args?.nomeModelo) {
      const normalizar = (str) =>
        str.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").trim();
      const nomeNormalizado = normalizar(args.nomeModelo);
  
      // Tenta encontrar entre os modelos recentes
      modeloFocado = modelos.find((m) => normalizar(m.nome) === nomeNormalizado);
  
      // Fallback: busca no banco se n√£o estiver entre os recentes
      if (!modeloFocado) {
        const todos = await getAllCelulareBoleto();
        modeloFocado = todos.find((m) => normalizar(m.nome) === nomeNormalizado);
      }
    }
  
    let descricaoModelos = "";
  
    if (modeloFocado) {
      descricaoModelos = `
  ‚û°Ô∏è *${modeloFocado.nome}*
  üí¨ Descri√ß√£o: ${modeloFocado.descricaoCurta}
  üß† Subt√≠tulo: ${modeloFocado.subTitulo}
  üí° Frase impacto: ${modeloFocado.fraseImpacto}
  üíµ Pre√ßo: R$ ${modeloFocado.preco.toFixed(2)}
  üí≥ Parcelado: ${modeloFocado.precoParcelado}
  üñºÔ∏è Imagem: ${modeloFocado.imagemURL}
  `;
    } else {
      descricaoModelos = modelos.map((m) => `
  ‚û°Ô∏è *${m.nome}*
  üí¨ Descri√ß√£o: ${m.descricaoCurta}
  üß† Subt√≠tulo: ${m.subTitulo}
  üí° Frase impacto: ${m.fraseImpacto}
  üíµ Pre√ßo: R$ ${m.preco.toFixed(2)}
  üí≥ Parcelado: ${m.precoParcelado}
  üñºÔ∏è Imagem: ${m.imagemURL}
  `).join("\n");
    }
  
    // ‚úÖ Sempre registra tag no Kommo se houver modelo focado
    if (modeloFocado) {
      const modeloJaNaLista = modelos.find(m => m.nome.toLowerCase() === modeloFocado.nome.toLowerCase());
      if (!modeloJaNaLista) {
        modelos.push(modeloFocado); // adiciona na lista para IA responder com ele
      }
  
      try {
        await registrarTagModeloConfirmado(sender, modeloFocado.nome);
        console.log(`‚úÖ Tag registrada para modelo: ${modeloFocado.nome}`);
      } catch (err) {
        console.warn("‚ö†Ô∏è Erro ao registrar tag no Kommo:", err.message);
      }

      try {
        await atualizarValorVendaDoLead(`${sender}@c.us`, modeloFocado.preco);
        console.log(`üí∞ Valor do lead atualizado para R$ ${modeloFocado.preco}`);
      } catch (err) {
        console.warn("‚ö†Ô∏è Erro ao atualizar valor do lead no Kommo:", err.message);
      }
      
    }
  
    const historico = await getConversation(sender);
    const ultimaTOA = [...historico].reverse().find(msg => msg.tipo === "deliberacao_toa");
  
    const contexto = `
  Voc√™ √© Anna, especialista da Vertex Store.
  
  Siga exatamente as diretrizes abaixo para responder qualquer cliente:
  
  TOM DE VOZ:
  ${JSON.stringify(tomDeVozVertex, null, 2)}
  
  OBJE√á√ïES COMUNS:
  ${JSON.stringify(obje√ß√µesVertexBoleto, null, 2).slice(0, 3000)}
  
  OBJE√á√ïES SOBRE PAYJOY:
  ${JSON.stringify(informacoesPayjoy).slice(0, 3500)}
  
  GATILHOS EMOCIONAIS:
  ${JSON.stringify(gatilhosEmocionaisVertex, null, 2)}
  `;
  
    const prompt = `
  ## OBJETIVO
  Guiar o cliente at√© escolher um smartphone da lista apresentada e fechar a venda,
  sempre valorizando experi√™ncia, suporte humanizado e diferencial da loja.
  Esteja sempre preparado para responder d√∫vidas de obje√ß√µes que n√£o necessariamente ligadas ao modelo em si.
  Utilize a documenta√ß√£o para responder essas obje√ß√µes e seja criativo.
  *** SEMPRE ao falar de pre√ßos, deixe claro que s√£o estimativas e podem flutuar conforme disponibilidade da PayJoy. ***
  
  ## TOM_DE_VOZ
  - Sauda√ß√£o acolhedora por√©m direta.
  - Use vocativo informal respeitoso (ex.: ‚ÄúPerfeito, ${nomeUsuario}!‚Äù).
  - Emojis: üíú obrigat√≥rio + 1 contextual; use üî• para descontos.
  - At√© 250 caracteres por bloco; quebre linhas por assunto.
  - Pontua√ß√£o dupla (‚Äú!!‚Äù, ‚Äú‚Ä¶‚Äù ) permitida.
  
  ## GATILHOS_EMOCIONAIS
  - Priorize Seguran√ßa ‚ûú Rapidez ‚ûú Transfer√™ncia de dados na hora.
  - Explore ‚ÄúGarantia emp√°tica‚Äù, ‚ÄúTelefone reserva‚Äù, ‚ÄúLoja f√≠sica confi√°vel‚Äù.
  - Conecte benef√≠cios √† vida di√°ria (produtividade, mem√≥rias, status).
  
  ## OBJE√á√ïES & COMPARATIVOS
  - Se cliente comparar pre√ßo online ‚Üí explique valor agregado (lista de diferenciais).
  - Descontos: no boleto, n√£o h√° descontos.
  - Parcelamento apenas em 18x.
  - Use analogias para comparar servi√ßos (ex.: ‚Äúcomprar s√≥ pre√ßo √© como‚Ä¶‚Äù).
  
  ## REGRAS_DE_ESTILO
  - Nunca comece com sauda√ß√£o completa; a conversa j√° est√° em andamento.
  - Seja conciso e humanizado; m√°ximo 3 blocos: ‚Äúemo√ß√£o‚Äù, ‚Äúbenef√≠cio‚Äù, ‚Äúcall-to-action‚Äù.
  - Sempre feche perguntando algo que avance (ex.: ‚ÄúFecho em 10√ó pra voc√™?‚Äù).
  
  üìç Endere√ßo:
  Av. Get√∫lio Varga, 333, Centro, Araruama - RJ, Brasil. CEP 28979-129
  üìå Refer√™ncia: Mesma cal√ßada da loteria e xerox do bol√£o, em frente √† faixa de pedestre
  üïò Atendimento: De 09:00 √†s 19:00, de segunda a s√°bado

  **NOS N√ÉO POSSUIMOS IPHONE PARA EVNDA NA LOJA, DIGA DE MODO SUAVE QUE TRABALHAMOS APENAS COM A LINHA REDMI POCO E REALME, HIPOTESE NENHUMA RESPONDE QUE TRABALHOMOS COM IPHONE**
  
  üß† √öltima mensagem do cliente:
  "${entrada}"
  
  üìú Hist√≥rico da conversa:
  ${conversaCompleta}
  
  üß† √öltima decis√£o TOA:
  ${JSON.stringify(ultimaTOA, null, 2)}
  
  üì± Modelos apresentados:
  ${descricaoModelos}
  
  ‚úîÔ∏è Modelos confirmados anteriormente:
  ${modelosConfirmados.length > 0
        ? modelosConfirmados.map(m => `‚úîÔ∏è *${m}*`).join("\n")
        : "Nenhum ainda foi confirmado."}
  
  üß† √öltimo modelo confirmado:
  ${modelosConfirmados[modelosConfirmados.length - 1] || "nenhum"}
  `;
  
    const respostaIA = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: contexto },
        { role: "user", content: prompt }
      ],
      temperature: 1.0,
      max_tokens: 200
    });
  
    const respostaFinal = respostaIA.choices?.[0]?.message?.content?.trim();
  
    if (!respostaFinal) {
      return await sendBotMessage(sender, "üìå Estou verificando... Pode repetir a d√∫vida de forma diferente?");
    }
  
    // ‚úÖ Envia resumo para os internos ap√≥s responder d√∫vida sobre modelo
    await enviarResumoParaNumeros(sender);
  
    return await sendBotMessage(sender, respostaFinal);
  }, 
  responderDuvidasGenericas: async (sender, args, extras) => {
    await setUserStage(sender, "agente_de_demonstracao_pos_decisao_por_boleto");
    const { msgContent, quotedMessage, pushName } = extras;
    const nomeUsuario = pushName || "cliente";
  
    // üßº Entrada enriquecida com texto do quoted
    const entrada = await sanitizarEntradaComQuoted(sender, msgContent, quotedMessage);
  
    // ‚è∫Ô∏è Salva como d√∫vida geral
    await appendToConversation(sender, {
      tipo: "duvida_geral",
      conteudo: entrada,
      timestamp: new Date().toISOString()
    });
  
    // üìö Carrega o contexto completo da conversa
    const {
      modelos,
      nomeUsuario: nomeUsuarioContextual,
      conversaCompleta,
      modelosConfirmados
    } = await prepararContextoDeModelosRecentes(sender);
  
    const prompt = `
  Voc√™ √© Anna, especialista da Vertex Store üíú
  
  Responda a seguinte d√∫vida do cliente com empatia, clareza e foco em ajudar de forma informal e acolhedora.
  
  üîç Entrada do cliente:
  "${entrada}"
  
  üì¶ Modelos sugeridos:
  ${modelos.length > 0
      ? modelos.map(m => `‚û°Ô∏è ${m.nome} - ${m.descricaoCurta} - R$ ${m.preco.toFixed(2)}`).join("\n")
      : "Nenhum modelo sugerido ainda."}
  
  ‚úîÔ∏è Modelos confirmados:
  ${modelosConfirmados.length > 0
      ? modelosConfirmados.map(m => `‚úîÔ∏è ${m}`).join("\n")
      : "Nenhum confirmado ainda."}
  
  üìú Hist√≥rico recente:
  ${conversaCompleta}
  
  üí° Instru√ß√µes:
  - Se a d√∫vida for sobre produto, pre√ßo, garantia ou suporte ‚Üí responda com clareza.
  - Se for uma d√∫vida fora do escopo (ex: troca, defeito, localiza√ß√£o), oriente e diga que ser√° encaminhada.
  - Use tom humano, emp√°tico, com emoji üíú e uma pergunta no final.

  "localizacaoLoja":  
      "endereco": "Av. Get√∫lio Varga, 333, Centro, Araruama - RJ, Brasil. CEP 28979-129",
      "referencia": "Mesma cal√ßada da loteria e xerox do bol√£o, em frente √† faixa de pedestre",
      "horarioFuncionamento": "De 09:00 √†s 19:00, de segunda a s√°bado"
  `;
  
    const respostaIA = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: `Voc√™ √© uma atendente da Vertex Store, informal, clara e acolhedora.` },
        { role: "user", content: prompt }
      ],
      temperature: 0.9,
      max_tokens: 350
    });
  
    const respostaFinal = respostaIA.choices?.[0]?.message?.content?.trim();
  
    if (!respostaFinal) {
      return await sendBotMessage(sender, "üì© Recebi sua d√∫vida, e j√° estou vendo com a equipe! J√° te retorno üíú");
    }

    // ‚úÖ Envia o resumo para os internos mesmo ap√≥s d√∫vida gen√©rica
  await enviarResumoParaNumeros(sender);
  
    return await sendBotMessage(sender, respostaFinal);
  },
  agenteDeDemonstracaoPorNomePorBoleto: async (sender, args, { msgContent, pushName }) => {
    await setUserStage(sender, "agente_de_demonstracao_por_nome_por_boleto");
    // Salva como modelo confirmado
    const nomeModelo = args?.nomeModelo?.trim();

    return await agenteDeDemonstracaoPorNomePorBoleto({ sender, msgContent, pushName, modeloMencionado: nomeModelo });
  },
  //mostrar todos os modelos


};



module.exports = {
  agenteDeDemonstracaoPosDecisaoPorBoleto,
  
};

