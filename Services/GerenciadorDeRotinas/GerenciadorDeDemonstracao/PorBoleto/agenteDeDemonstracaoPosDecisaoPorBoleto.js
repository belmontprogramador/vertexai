const { sendBotMessage } = require("../../../messageSender");
const {
  setUserStage,  
  getNomeUsuario,
  getUserStage
} = require("../../../redisService");
 
 
const { informacoesPayjoy } = require("../../../utils/informacoesPayjoy");
const { gatilhosEmocionaisVertex } = require('../../../utils/gatilhosEmocionais');
const { tomDeVozVertex } = require('../../../utils/tomDeVozVertex');
const { obje√ß√µesVertexBoleto } = require("../../../utils/objecoesBoleto"); ;
const { handlers: handlersDemonstracaoDetalhadaBoleto, agenteDeDemonstracaoDetalhadaBoleto } = require("../../../GerenciadorDeRotinas/GerenciadorDeDemonstracao/agenteDeDemonstracaoDetalhadaBoleto");
const { appendToConversation, getConversation } = require("../../../HistoricoDeConversas/conversationManager");
const {getAllCelulareBoleto } = require('../../../dbService')

const OpenAI = require("openai");
const { agenteDeDemonstracaoPorNomePorBoleto } = require("./agenteDeDemonstracaoPorNomePorBoleto");
 
require("dotenv").config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const agenteDeDemonstracaoPosDecisaoPorBoleto = async ({ sender, msgContent, pushName, quotedMessage }) => {
  try {
    await setUserStage(sender, "agente_de_demonstracao_pos_decisao_por_boleto");

    // üîç Entrada sanitizada
    let entrada = typeof msgContent === "string" ? msgContent : msgContent?.termosRelacionados || "";
    if (quotedMessage) entrada += ` || Mensagem citada: ${quotedMessage}`;
    entrada = entrada.trim().replace(/^again\s*/i, "") || "o cliente marcou uma mensagem mas n√£o escreveu nada";

    // üìù Salva no hist√≥rico com JSON estruturado
    await appendToConversation(sender, JSON.stringify({
      tipo: "entrada_usuario",
      conteudo: entrada,
      timestamp: new Date().toISOString()
    }));

    const conversa = await getConversation(sender);

    // üß† Modelos recentes (JSON e prefixo antigo compat√≠vel)
    const modelosRecentes = conversa
    .map(msg => {
      try {
        const obj = typeof msg === "string" ? JSON.parse(msg) : msg;
  
        if (obj.tipo === "modelo_sugerido_json") return obj.conteudo;
        if (obj.tipo === "modelo_sugerido") {
          return typeof obj.conteudo === "string"
            ? { nome: obj.conteudo }
            : obj.conteudo;
        }
      } catch {
        if (typeof msg === "string" && msg.startsWith("modelo_sugerido: ")) {
          return { nome: msg.replace("modelo_sugerido: ", "") };
        }
      }
      return null;
    })
    .filter(Boolean);
  

    // üìú Formato simples da conversa para prompt
    const conversaCompleta = conversa
      .map(msg => {
        try {
          const obj = JSON.parse(msg);
          return `[${obj.tipo}] ${obj.conteudo}`;
        } catch {
          return msg;
        }
      })
      .slice(-10)
      .join(" | ");

    // ü§ñ Delibera√ß√£o TOA
    const deliberarPossibilidades = async () => {
      const prompt = `
Cliente enviou: "${entrada}"
MODELOS MOSTRADOS:
${modelosRecentes.map(m => `- ${m.nome}`).join("\n") || "(nenhum modelo mostrado ainda)"}

üí° Quais s√£o as 3 possibilidades mais prov√°veis que o cliente quer com essa mensagem?
1. Se ‚Äî e SOMENTE SE ‚Äî o cliente disser explicitamente frases como "fechou", "quero esse", "vamos fechar", "√© esse mesmo", "bora", "fechado", ou mencionar uma data exata de fechamento como "vou hoje", "passo a√≠ amanh√£", "m√™s que vem", ent√£o ele est√° confirmando um dos modelos sugeridos. Escolha mostrarResumoModeloBoleto.

2. Se o cliente fizer QUALQUER pergunta mesmo sem usar ponto de ? ‚Äî mesmo curta ‚Äî como "√© bom?", "e esse?", "a c√¢mera √© boa?", "qual o pre√ßo?", ou mostrar d√∫vida sobre qualquer aspecto, isso deve ser interpretado como que ele ainda est√° indeciso e precisa de mais informa√ß√µes. Escolha "responderDuvida".

3. Se ele mencionar um novo modelo, diferente dos listados, √© "identificarModeloPorNome".

Retorne em formato JSON:
{
  "possibilidades": [
    { "acao": "", "motivo": "" }
  ]
}`;

      const resp = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.9
      });

      const raw = resp.choices?.[0]?.message?.content || "";
      const jsonMatch = raw.match(/\{[\s\S]*\}/);
      if (!jsonMatch) return null;
      return JSON.parse(jsonMatch[0]);
    };

    // üîç Avalia√ß√£o baseada nas possibilidades da IA
    const avaliarMelhorCaminho = (possibilidades) => {
      if (!possibilidades?.possibilidades || possibilidades.possibilidades.length === 0) {
        return "responderDuvida";
      }
      return possibilidades.possibilidades[0].acao;
    };

    const resultadoTOA = await deliberarPossibilidades();
    const acaoEscolhida = avaliarMelhorCaminho(resultadoTOA);
    console.log("üéØ Resultado TOA:", JSON.stringify(resultadoTOA, null, 2));

    // üé¨ Execu√ß√£o da a√ß√£o
    if (handlers[acaoEscolhida]) {
      return await handlers[acaoEscolhida](sender, {}, {
        msgContent: entrada,
        quotedMessage,
        pushName,
        conversaCompleta
      });
    }

    return await sendBotMessage(sender, "‚ö†Ô∏è N√£o entendi sua escolha. Pode repetir?");
  } catch (error) {
    console.error("‚ùå Erro no agente TOA:", error);
    return await sendBotMessage(sender, "‚ö†Ô∏è Ocorreu um erro. Pode tentar de novo?");
  }
};

const handlers = {
  demonstracaoDetalhadaBoleto: async (sender, args, extras) => {
    await setUserStage(sender, "agente_de_demonstra√ß√£o_detalhada_boleto");
  
    const historico = await getConversation(sender);
  
    const modeloJaMostrado = historico.some((m) =>
      m.includes("modelo_sugerido_json") && m.includes(args.modeloMencionado)
    );
  
    if (!modeloJaMostrado && args?.modeloMencionado) {
      const modelos = await getAllCelulareBoleto();
      const modeloEscolhido = modelos.find(m =>
        m.nome.toLowerCase() === args.modeloMencionado.toLowerCase()
      );
  
      if (modeloEscolhido) {
        // ‚ö†Ô∏è Aqui voc√™ chama o outro handle
        await handlers.mostrarResumoModeloBoleto(sender, { nomeModelo: modeloEscolhido.nome }, { modeloEscolhido });

      }
    }
  
    // Continua com a demonstra√ß√£o detalhada
    return await agenteDeDemonstracaoDetalhadaBoleto({
      sender,
      msgContent: extras.msgContent,
      pushName: extras.pushName,
      modeloMencionado: args.modeloMencionado
    });
  },
  mostrarResumoModeloBoleto: handlersDemonstracaoDetalhadaBoleto.mostrarResumoModeloBoleto,
  responderDuvida: async (sender, _args, extras) => {
    await setUserStage(sender, "agente_de_demonstracao_pos_decisao_por_boleto");

    const { msgContent, quotedMessage } = extras;
 

    let entrada = typeof msgContent === "string" ? msgContent : msgContent?.termosRelacionados || "";

    // üîç Extrai o modelo da mensagem citada
    let modeloExtraido = null;
    if (quotedMessage) {
      const match = quotedMessage.match(/\*([^*]*(REALME|REDMI|POCO)[^*]*)\*/i);
      modeloExtraido = match?.[1]?.replace(/üî•/g, '').trim();
      console.log("üîé Modelo extra√≠do da quotedMessage:", modeloExtraido);
    }

    // üß† Substitui mensagens vagas pela cita√ß√£o
    if ((!entrada || /esse|modelo|aqui|isso/i.test(entrada)) && modeloExtraido) {
      entrada = modeloExtraido;
      console.log("üìå Entrada substitu√≠da pela cita√ß√£o:", entrada);
    }

    entrada = entrada.trim().replace(/^again\s*/i, "") || "o cliente marcou uma mensagem mas n√£o escreveu nada";
    console.log("‚úèÔ∏è Entrada final:", entrada);

    await appendToConversation(sender, JSON.stringify({
      tipo: "entrada_usuario",
      conteudo: entrada,
      timestamp: new Date().toISOString()
    }));
    

    const historico = await getConversation(sender);
    const conversaCompleta = historico
  .map(f => {
    try {
      const obj = typeof f === "string" ? JSON.parse(f) : f;
      const texto = obj?.conteudo || "";
      return texto.replace(/^again\s*/i, "").trim();
    } catch {
      return typeof f === "string" ? f.trim() : "";
    }
  })
  .slice(-10)
  .join(" | ");


    const modelosBanco = await getAllCelulareBoleto();
    const nome = await getNomeUsuario(sender);

    const modelosRecentes = historico
  .map(msg => {
    try {
      const obj = typeof msg === "string" ? JSON.parse(msg) : msg;

      if (obj.tipo === "modelo_sugerido_json") return obj.conteudo;
      if (obj.tipo === "modelo_sugerido") {
        return typeof obj.conteudo === "string"
          ? { nome: obj.conteudo }
          : obj.conteudo;
      }
    } catch {
      if (typeof msg === "string" && msg.startsWith("modelo_sugerido: ")) {
        return { nome: msg.replace("modelo_sugerido: ", "") };
      }
    }
    return null;
  })
  .filter(Boolean);


    const mapaUnico = new Map();
    for (const modelo of modelosRecentes.reverse()) {
      const chave = modelo.nome.toLowerCase();
      if (!mapaUnico.has(chave)) {
        mapaUnico.set(chave, modelo);
      }
    }

    const modelos = Array.from(mapaUnico.values())
      .map(mJson => modelosBanco.find(m => m.nome.toLowerCase() === mJson.nome.toLowerCase()))
      .filter(Boolean);

    if (modelos.length === 0) {
      return await sendBotMessage(sender, "‚ö†Ô∏è Ainda n√£o te mostrei nenhum modelo pra comparar. Quer ver algumas op√ß√µes?");
    }
    const contexto = `
    Voc√™ √© Anna, especialista da Vertex Store.
    
    Siga exatamente as diretrizes abaixo para responder qualquer cliente:
    
    TOM DE VOZ:
    ${JSON.stringify(tomDeVozVertex, null, 2)}
    
    OBJE√á√ïES COMUNS:
    ${JSON.stringify(obje√ß√µesVertexBoleto, null, 2).slice(0, 3000)}

       OBJE√á√ïES SOBRE PAYJOY:
    ${JSON.stringify(informacoesPayjoy).slice(0, 3500)}
    
    GATILHOS EMOCIONAIS:
    ${JSON.stringify(gatilhosEmocionaisVertex, null, 2)}
    `;

    // üß† Prompt formatado para a IA
    const prompt = `
  ## OBJETIVO
  Guiar o cliente at√© escolher um smartphone da lista apresentada e fechar a venda,
  sempre valorizando experi√™ncia, suporte humanizado e diferencial da loja.
  esteja sempre preparado para responder duvidas de obje√ß√µes que n√£o necessariamente ligados ao modelo em si, utlize a documenta√ß√£o para respoder essa obje√ß√µes e seja criativo
  *** SEMPRE AO FALAR DE PRE√áOS DEIXE BEM CLARO QUE ESSE VALORES S√ÉO ESTIMATIVAS E QUE PODEM FLUTUAR DE ACORDO COM A DISPONIBILIDADE DA PAY JOY ***
  ## TOM_DE_VOZ
  - Sauda√ß√£o acolhedora por√©m direta.
  - Use vocativo informal respeitoso (ex.: ‚ÄúPerfeito, ${nome}!‚Äù).
  - Emojis: üíú obrigat√≥rio + 1 contextual; use üî• para descontos.
  - At√© 250 caracteres por bloco; quebre linhas por assunto.
  - Pontua√ß√£o dupla (‚Äú!!‚Äù, ‚Äú‚Ä¶‚Äù ) permitida.

  ## GATILHOS_EMOCIONAIS
  - Priorize Seguran√ßa ‚ûú Rapidez ‚ûú Transfer√™ncia de dados na hora.
  - Explore ‚ÄúGarantia emp√°tica‚Äù, ‚ÄúTelefone reserva‚Äù, ‚ÄúLoja f√≠sica confi√°vel‚Äù.
  - Conecte benef√≠cios √† vida di√°ria (produtividade, mem√≥rias, status).

  ## OBJE√á√ïES & COMPARATIVOS
  - Se cliente comparar pre√ßo online ‚Üí explique valor agregado (lista de diferenciais).
  - Descontos: no boleto n√£o descontos
  - Parcelamento padr√£o apenas em 18√ó; .
  - Use analogias para comparar servi√ßos (ex.: ‚Äúcomprar s√≥ pre√ßo √© como‚Ä¶‚Äù).

   ## OBJE√á√ïES DE DUVIDAS SOBRE BOLETO(OBJE√á√ïES SOBRE PAYJOY:)

  ## REGRAS_DE_ESTILO
  - Nunca comece com sauda√ß√£o completa; a conversa j√° est√° em andamento.
  - Seja conciso e humanizado; m√°ximo 3 blocos (‚Äúemo√ß√£o‚Äù, ‚Äúbenef√≠cio‚Äù, ‚Äúcall-to-action‚Äù).
  - Sempre feche perguntando algo que avance (ex.: ‚ÄúFecho em 10√ó pra voc√™?‚Äù).

  üìú Hist√≥rico da conversa:
  ${conversaCompleta}

  üß† √öltima mensagem do cliente:
  "${entrada}"

  üì± Modelos apresentados:
  ${modelos.map(m => `‚û°Ô∏è *${m.nome}*\nüíµ Pre√ßo: R$ ${m.preco.toFixed(2)}`).join("\n")}

  Nome do cliente: ${nome}
  `;

    const respostaIA = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: contexto },
        { role: "user", content: prompt }
      ],
      temperature: 1.0,
      max_tokens: 200
    });

    const respostaFinal = respostaIA.choices[0]?.message?.content?.trim();

    if (!respostaFinal) {
      return await sendBotMessage(sender, "üìå Estou verificando... Pode repetir a d√∫vida de forma diferente?");
    }

    return await sendBotMessage(sender, respostaFinal);
  },
  identificarModeloPorNome: async (sender, _args, { msgContent, pushName }) => {
    await setUserStage(sender, "agente_de_demonstracao_por_nome_por_boleto");
    const novoStage = await getUserStage(sender);
    await sendBotMessage(sender, novoStage);
    return await agenteDeDemonstracaoPorNomePorBoleto({ sender, msgContent, pushName });
  }
};

 

module.exports = { agenteDeDemonstracaoPosDecisaoPorBoleto };
