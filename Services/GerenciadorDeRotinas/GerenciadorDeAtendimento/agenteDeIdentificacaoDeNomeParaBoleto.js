const { sendBotMessage } = require("../../messageSender");
const {
  setUserStage,
  storeNomeUsuario,  
} = require("../../redisService");
const { rotinaDeBoleto } = require("../GerenciadorDeDemonstracao/PorBoleto/rotinaDeBoleto");

const OpenAI = require("openai");
require("dotenv").config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üîπ Fun√ß√µes para lidar com os caminhos da decis√£o
const handlers = {
  salvar_nome_usuario: async (sender, args, extras) => {
    const { msgContent } = extras;
    const nome = args.nome;
    await storeNomeUsuario(sender, nome);
    await setUserStage(sender, "rotina_de_boleto");
    return await rotinaDeBoleto({ sender, msgContent, pushName: nome });
  },

  pedir_nome_novamente: async (sender) => {
    await setUserStage(sender, "agente_de_identifica√ß√£o_de_nome");
    const frases = [ `A gente adora atender bem, e seu nome √© fundamental pra isso. Como devo¬†te¬†chamar?¬†üíú`,
      `Compartilha seu nome com a gente? Assim ajustamos tudo pra te atender¬†do¬†seu¬†jeito¬†üíú`
] 
const fraseEscolhida = frases[Math.floor(Math.random() * frases.length)];  
    return await sendBotMessage(sender,fraseEscolhida);
  }
};

// üîπ Defini√ß√£o das fun√ß√µes (tools)
const functions = [
  {
    name: "salvar_nome_usuario",
    description: "Identificar o nome do usuario por exemplo 'felipe', 'julia', 'fernado', 'amanda'.Armazena o nome informado pelo usu√°rio.",
    parameters: {
      type: "object",
      properties: {
        nome: {
          type: "string",
          description: "O usuario vai informar o nome dele"
        }
      },
      required: ["nome"]
    }
  },
  {
    name: "pedir_nome_novamente",
    description: "Usu√°rio ainda n√£o informou o nome, pedir novamente."
  }
];

// üîπ Agente principal
const agenteDeIdentificacaoDeNomeParaBoleto = async ({ sender, msgContent, pushName }) => {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: `
          Voc√™ √© Anna, assistente da Vertex Store. Seu √∫nico objetivo agora √© identificar o **primeiro nome** do cliente.
          
          üìå Regras essenciais:
          - Sempre que o cliente disser algo como "me chamo Ana", "sou o Lucas", "aqui √© o Jo√£o", ou at√© "meu nome √© Jo√£o da Silva", chame a fun√ß√£o salvar_nome_usuario com **apenas o primeiro nome** (ex: "Jo√£o").
          - Aceite frases naturais, informais ou abreviadas, como "Ana aqui", "√â o Jo√£o", "Lucas falando", "eu Ana", etc.
          - Ignore sobrenomes, emojis, n√∫meros ou sauda√ß√µes.
          - Caso o texto **n√£o contenha nenhum nome**, ou pare√ßa gen√©rico demais ("oi", "bom dia", "quero celular", "me ajuda"), chame a fun√ß√£o pedir_nome_novamente.
          
          ‚ö†Ô∏è Nunca invente nomes. Se n√£o encontrar um nome claro, prefira chamar pedir_nome_novamente.
          `
          
        },
        { role: "user", content: msgContent }
      ],
      functions,
      function_call: "auto"
    });

    const toolCall = completion.choices[0]?.message?.function_call;
    if (toolCall) {
      const { name, arguments: argsStr } = toolCall;
      const args = argsStr ? JSON.parse(argsStr) : {};

      if (handlers[name]) {
        return await handlers[name](sender, args, { msgContent });
      }
    }

    // fallback
    await sendBotMessage(sender, "ü§ñ N√£o consegui entender. Qual √© o seu primeiro nome?");
    await setUserStage(sender, "agente_de_identifica√ß√£o_de_nome");
  } catch (error) {
    console.error("‚ùå Erro no agenteDeIdentificacaoDeNome:", error.message);
    await sendBotMessage(sender, "‚ö†Ô∏è Ocorreu um erro ao tentar identificar seu nome. Pode repetir?");
  }
};

module.exports = { agenteDeIdentificacaoDeNomeParaBoleto };