const { sendBotMessage } = require("../../../messageSender");
const { setUserStage } = require("../../../redisService");
const { rotinaDeSondagemDeCelular } = require("../../GerenciadorDeSondagem/rotinaDeSondagemDeCelular");
const { agenteHallDeBoleto } = require("../../GerenciadordeBoleto/ServicesOpenAiBoleto/agenteHallDeBoleto");

const OpenAI = require("openai");
require("dotenv").config();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üì¶ Fun√ß√µes dispon√≠veis para o modelo decidir
const functions = [
  {
    type: "function",
    function: {
      name: "seguir_para_boleto",
      description: "Chame esta fun√ß√£o se o cliente demonstrar inten√ß√£o clara de pagar via boleto, fazer credi√°rio, parcelar com entrada ou se mostra animado com a ideia de parcelar sem cart√£o. Tamb√©m chame esta fun√ß√£o se ele mencionar interesse em 'parcelar no boleto', 'pagar com entrada', 'n√£o tenho cart√£o', 'como funciona o credi√°rio', ou frases semelhantes.",
      parameters: {
        type: "object",
        properties: {
          querBoleto: {
            type: "boolean",
            description: "Indica se o cliente quer pagar com boleto, fazer credi√°rio ou seguir nessa op√ß√£o de pagamento."
          }
        },
        required: ["querBoleto"]
      }
    }
  },
  {
    type: "function",
    function: {
      name: "voltar_para_sondagem",
      description: "Chame esta fun√ß√£o se o cliente expressar que quer ver outras op√ß√µes de pagamento como Pix, Cart√£o, ou mesmo trocar de produto. Tamb√©m chame esta fun√ß√£o se ele usar frases como 'tem Pix?', 'posso pagar no cart√£o?', 'quero outro modelo', 'boleto n√£o', 'n√£o quero parcelar assim'.",
      parameters: {
        type: "object",
        properties: {
          querBoleto: {
            type: "boolean",
            description: "Indica que o cliente n√£o quer boleto e deseja voltar para sondagem de produtos ou formas de pagamento."
          }
        },
        required: ["querBoleto"]
      }
    }
  }
  
];

// üß† Handlers para cada fun√ß√£o
const handlers = {
  seguir_para_boleto: async (sender, args, extras) => {
    const { msgContent, pushName } = extras;
    const boleto = await setUserStage(sender, "boleto_agente");
    console.log(`${boleto}, to nesse estagio`)
    return await agenteHallDeBoleto({ sender, msgContent, pushName });
  },

  voltar_para_sondagem: async (sender, args, extras) => {
    const { msgContent, pushName } = extras;
    const boleto2 = await setUserStage(sender, "sondagem_de_celular");
    console.log(`${boleto2}, to nesse estagio`)
    return await rotinaDeSondagemDeCelular({ sender, msgContent, pushName });
  }
};

// ü§ñ Agente de decis√£o
const agenteDeDecisaoParaBoletoOuSondagem = async ({ sender, msgContent, pushName }) => {
  await setUserStage(sender, "agente_de_decisao_boleto_ou_sondagem");

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      messages: [
        {
          role: "system",
          content: `
Voc√™ √© Anna, especialista da VertexStore.

O cliente acabou de receber informa√ß√µes sobre op√ß√µes de pagamento.

Com base na resposta do cliente abaixo, decida se ele quer:
- seguir com a explica√ß√£o sobre pagamento via *boleto parcelado* (caso diga "quero boleto", "quero pagar no boleto", "tem parcelamento no boleto", etc),
- ou se deseja voltar para ver outras op√ß√µes de produto ou pagamento.

Tome a decis√£o chamando a fun√ß√£o correta:
- *seguir_para_boleto* para continuar com boleto
- *voltar_para_sondagem* para retornar √† escolha de produtos ou op√ß√µes
`
        },
        { role: "user", content: msgContent }
      ],
      tools: functions,
      tool_choice: "auto"
    });

    const choice = completion.choices[0];

    if (choice.finish_reason === "tool_calls" && choice.message.tool_calls?.[0]) {
      const toolCall = choice.message.tool_calls[0];
      const funcName = toolCall.function.name;
      const args = JSON.parse(toolCall.function.arguments || "{}");

      if (handlers[funcName]) {
        return await handlers[funcName](sender, args, {
          msgContent,
          pushName
        });
      }
    }

    await sendBotMessage(sender, "ü§ñ N√£o consegui entender. Voc√™ quer pagar no boleto ou prefere voltar para outras op√ß√µes?");
  } catch (err) {
    console.error("‚ùå Erro no agente de decis√£o boleto/sondagem:", err);
    await sendBotMessage(sender, "‚ö†Ô∏è Ocorreu um erro ao tentar entender sua resposta. Pode tentar novamente?");
  }
};

module.exports = { agenteDeDecisaoParaBoletoOuSondagem };
