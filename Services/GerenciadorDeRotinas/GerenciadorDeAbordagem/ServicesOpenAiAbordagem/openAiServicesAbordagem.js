const { sendBotMessage } = require("../../../messageSender");
const { 
  setUserStage,  
  getHistoricoFormatadoParaPrompt,   
} = require("../../../redisService");
const { rotinaDeSondagemDeCelular } = require("../../GerenciadorDeSondagem/rotinaDeSondagemDeCelular");
const { rotinaDeSondagemDeAcessorios } = require("../../GerenciadorDeSondagem/rotinaDeSondagemAcessorios");
const { rotinaDeDemonstracaoPorNome } = require("../../GerenciadordeDemonstracao/rotinaDeDemonstracaoPorNome");
const { rotinaDeBoleto } = require("../../GerenciadordeBoleto/rotinaDeBoleto")
const { rotinaDeSuporte } = require("../../GerenciadorDeSuporte/rotinaDeSuporte")

const OpenAI = require("openai");
require("dotenv").config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üîπ Fun√ß√µes para lidar com cada categoria de interesse
const handlers = {
  consultarCelulares: async (sender, msgContent, pushName) => {
    await setUserStage(sender, "sondagem_de_celular");
    await rotinaDeSondagemDeCelular({ sender, msgContent, pushName });
  },
  demonstrarCelular: async (sender, msgContent, pushName, args = {}) => {
    await setUserStage(sender, "sequencia_de_demonstracao_por_nome");
  
    const modeloMencionado = args.termosRelacionados || "modelo n√£o especificado";
  
    await rotinaDeDemonstracaoPorNome({ sender, msgContent, modeloMencionado, pushName });
  },
  consultarParcelamento: async (sender, msgContent, pushName) => {
    await setUserStage(sender, "parcelamento");
    await await sendBotMessage(sender, "voce prefere no cart√£o ou no boleto?");
  },
  consultarAcessorios: async (sender, msgContent, pushName) => {
    await setUserStage(sender, "sondagem_de_acessorios");
    await rotinaDeSondagemDeAcessorios({ sender, msgContent, pushName });
  },
  consultarBoletos: async (sender, msgContent, pushName) => {
    await setUserStage(sender, "boleto");
    await rotinaDeBoleto({ sender, msgContent, pushName });
  },
  consultarOutros: async (sender, msgContent, pushName) => {
    await setUserStage(sender, "suporte");
    await rotinaDeSuporte({ sender, msgContent, pushName });
  },
 investigarIntencao: async (sender, msgContent, pushName) => {  
  await setUserStage(sender, "sequencia_de_abordagem")
  await sendBotMessage(
    sender,
    `ü§î Entendi que voc√™ ainda est√° decidindo... S√≥ pra te ajudar melhor, voc√™ est√° procurando um celular, acess√≥rio ou deseja saber sobre formas de pagamento como parcelamento ou boleto?`
  );
}
};


// üîπ Defini√ß√£o das fun√ß√µes dispon√≠veis (tools)
const functions = [
  {
    name: "consultarCelulares",
    description: `
  Use esta fun√ß√£o quando o usu√°rio demonstrar interesse gen√©rico por celulares sem citar marcas ou modelos. 
  Exemplos: 'quero ver celular', 'tem celular a√≠?', 'queria ver um celular', 'me mostra os celulares', '1', 'op√ß√£o 1', 'quero comprar celular'.
  N√£o use esta fun√ß√£o se o usu√°rio disser 'iPhone 13', 'Samsung', 'Xiaomi', ou qualquer modelo/marca espec√≠fica.
  `,
    parameters: {
      type: "object",
      properties: {
        interesse: { type: "string", enum: ["celulares"] },
        termosRelacionados: {
          type: "string",
          description: "Palavras gen√©ricas como: celular, ver celular, modelo bom, comprar celular, 1, op√ß√£o 1."
        }
      },
      required: ["interesse"]
    }
  },  
  {
    name: "demonstrarCelular",
    description: "Quando o usu√°rio menciona marcas ou modelos espec√≠ficos de celular, como 'iPhone 13', 'Samsung A23', 'Motorola', 'POCO X6 Pro', 'realme C55' e deseja ver detalhes do produto. ‚ö†Ô∏è Se o usu√°rio tamb√©m falar sobre formas de pagamento, a prioridade deve ser da fun√ß√£o 'consultarParcelamento'.",
    parameters: {
      type: "object",
      properties: {
        interesse: { type: "string", enum: ["demonstracao"] },
        termosRelacionados: {
          type: "string",
          description: "Modelo ou marca mencionada pelo usu√°rio como: iPhone, Samsung, A23, Xiaomi, Motorola, Redmi Note 13, POCO X6 Pro, realme C55, realme 11 Pro+."
        }
      },
      required: ["interesse"]
    }
  },
  {
    name: "consultarParcelamento",
    description: "Quando o usu√°rio fala sobre formas de pagamento como credi√°rio, parcelamento, 'em quantas vezes', 'parcelar no boleto' ou 'tenho nome sujo, consigo comprar?'. ‚úÖ Essa fun√ß√£o sempre tem prioridade se o usu√°rio mencionar tamb√©m um modelo de celular na mesma frase.",
    parameters: {
      type: "object",
      properties: {
        interesse: { type: "string", enum: ["parcelamento"] },
        termosRelacionados: {
          type: "string",
          description: "Termos mencionados pelo usu√°rio como: boleto, credi√°rio, nome sujo, formas de pagamento, parcelado"
        }
      },
      required: ["interesse"]
    }
  },
  { 
    name: "consultarAcessorios", 
    description: "Usu√°rio interessado em acess√≥rios.", 
    parameters: { 
      type: "object", 
      properties: { 
        interesse: { type: "string", enum: ["acessorios"] } 
      }, 
      required: ["interesse"] 
    } 
  },
  { 
    name: "consultarOutros", 
    description: "Usu√°rio menciona algo fora das categorias definidas.", 
    parameters: { 
      type: "object", 
      properties: { 
        interesse: { type: "string", enum: ["outros"] } 
      }, 
      required: ["interesse"] 
    } 
  },
  {
    name: "investigarIntencao",
    description: `Use esta fun√ß√£o quando a mensagem do usu√°rio estiver vaga, amb√≠gua ou evasiva, sem fornecer informa√ß√µes claras o suficiente para decidir se ele deseja ver celulares, acess√≥rios, formas de pagamento, boletos ou suporte, uma marca ou modelo especifico.
  
  Assim que a resposta posterior do usu√°rio estiver clara, a IA deve ent√£o redirecionar para a fun√ß√£o apropriada (consultarCelulares, demonstrarCelular, consultarParcelamento, etc.).
  
  ‚ö†Ô∏è **Importante**: esta fun√ß√£o **n√£o deve ser usada** se o usu√°rio der qualquer ind√≠cio claro de:
  - Marca ou modelo de celular (ex: ‚ÄúiPhone 11‚Äù)
  - Forma de pagamento (ex: ‚Äúparcelado‚Äù, ‚Äúboleto‚Äù)
  - Produto espec√≠fico (ex: ‚Äúcapa‚Äù, ‚Äúfone‚Äù, ‚Äúcarregador‚Äù)
  
  Neste caso, utilize diretamente a fun√ß√£o correspondente.`,
    parameters: {
      type: "object",
      properties: {
        interesse: { type: "string", enum: ["investigar"] }
      },
      required: ["interesse"]
    }
  }  
];

// üîπ Fun√ß√£o principal para rodar o agente de sondagem
const agenteDeDefini√ß√£oDeSondagem = async (sender, msgContent, pushName) => {
  // Recupera as √∫ltimas 3 mensagens j√° formatadas para o prompt
  const historicoFormatado = await getHistoricoFormatadoParaPrompt(sender, 3);

  try {
    // Monta o array de mensagens com o prompt detalhado
    const mensagensGPT = [
      {
        role: "system",
        content: `Voc√™ √© Anna, assistente virtual da VertexStore. Sua tarefa √© identificar com clareza a inten√ß√£o do usu√°rio com base nas √∫ltimas tr√™s mensagens do hist√≥rico e na mensagem atual. 

Regras para o caso de celulares:
1. Se o usu√°rio digitar apenas "1" ou mencionar apenas a palavra "celular" sem especificar modelo ou marca, leve-o para a rotina de sondagem de celular correspondente √† fun√ß√£o 'consultarCelulares'.
2. Se o usu√°rio mencionar um modelo ou uma marca de celular (por exemplo, "iPhone", "Samsung", "Motorola"), leve-o diretamente para a rotina de demonstra√ß√£o correspondente √† fun√ß√£o 'demonstrarCelular'.
3. Se o usu√°rio falar algo relacionado a credi√°rio, boleto ou parcelamento, interprete como d√∫vida sobre modos de parcelamento e direcione para a rotina de parcelamento correspondente √† fun√ß√£o 'consultarParcelamento'.
4. Se vier uma resposta amb√≠gua tipo 'Voc√™s t√™m o POCO X6 no boleto' ou 'quero um iPhone no credi√°rio', voc√™ deve sempre optar pela fun√ß√£o 'consultarParcelamento'.

‚ö†Ô∏è Aten√ß√£o: S√≥ use a fun√ß√£o 'investigarIntencao' se a mensagem estiver vaga como "t√¥ vendo ainda", "qualquer coisa", "n√£o sei".  
Se o usu√°rio disser claramente uma marca ou modelo (ex: ‚Äúquero um celular Motorola‚Äù), use diretamente 'demonstrarCelular'.
‚ÄºÔ∏è Priorize sempre decis√µes diretas. S√≥ investigue se realmente n√£o for poss√≠vel identificar nenhuma categoria clara.


Analise o contexto das √∫ltimas tr√™s mensagens juntamente com a mensagem atual, e responda apenas com a indica√ß√£o de qual fun√ß√£o chamar e, se necess√°rio, preencha os par√¢metros correspondentes.`
      },
      ...historicoFormatado,
      {
        role: "user",
        content: msgContent
      }
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: mensagensGPT,
      functions,
      function_call: "auto",
      temperature: 0.7
    });

    const response = completion.choices[0];

    if (response.finish_reason === "function_call") {
      const functionName = response.message.function_call.name;
      const args = JSON.parse(response.message.function_call.arguments || "{}");

      if (handlers[functionName]) {
        await handlers[functionName](sender, msgContent, pushName, args);
      } else {
        await sendBotMessage(sender, "‚ùå Desculpe, n√£o consegui identificar sua solicita√ß√£o.");
      }
    } else {
      // fallback: se a IA n√£o gerou uma fun√ß√£o, assume inten√ß√£o indefinida
      await handlers["investigarIntencao"](sender, msgContent, pushName);
    }
  } catch (error) {
    console.error("Erro no agente de sondagem:", error);
    await sendBotMessage(sender, "‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde.");
  }
};

module.exports = { agenteDeDefini√ß√£oDeSondagem };
