const { sendBotMessage } = require("../../../messageSender");
const {
  setUserStage,
  getChosenModel,
  getIntencaoDeUso
} = require("../../../redisService");

const { rotinaDeFechamento } = require("../../GerenciadorDeFechamento/rotinaDeFechamento");

const OpenAI = require("openai");
require("dotenv").config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const functions = [
  {
    name: "fecharVenda",
    description: "Chama o agente de fechamento quando o cliente quiser comprar ou agendar.",
    parameters: {
      type: "object",
      properties: {
        confirmacao: {
          type: "string",
          description: "Confirma√ß√£o de inten√ß√£o do cliente em comprar ou agendar"
        }
      },
      required: ["confirmacao"]
    }
  }
];

const handlers = {
  fecharVenda: async (sender, args, extras) => {
    const { modeloEscolhido, finalidade, investimento, pushName, msgContent } = extras;
    await sendBotMessage(sender, `üéØ Perfeito! Vamos agendar agora sua visita para garantir seu ${modeloEscolhido}.`);
    return await rotinaDeFechamento({
      sender,
      msgContent,
      produto: modeloEscolhido,
      finalidadeUso: finalidade,
      investimento,
      pushName
    });
  }
};

const agenteDeDemonstracaoDetalhada = async ({ sender, pushName, msgContent }) => {
  await setUserStage(sender, "agente_de_demonstra√ß√£o_detalhado");

  // üì¶ Usa o √∫ltimo modelo escolhido como base de resposta
  const modeloEscolhido = await getChosenModel(sender);
  const intencaoDeUso = await getIntencaoDeUso(sender)
  console.log("üì¶ [DEBUG] Modelo resgatado do Redis (modelo_escolhido):", modeloEscolhido);

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: `
Voc√™ √© Anna, especialista da VertexStore.

‚ö†Ô∏è O cliente escolheu o modelo: "${modeloEscolhido}". Este √© o √∫nico modelo em foco. O cliente pode fazer perguntas, demonstrar interesse ou obje√ß√µes sobre ele.
‚ö†Ô∏è O cliente tem a inten√ß√£o de uso:"${intencaoDeUso}". Voce deve sempre responder as perguntas focado na inten√ß√£o de uso do cliente, fazendouma aproxima emocional para compra.
Sua miss√£o:
1. Responda sempre com base no modelo "${modeloEscolhido}".
2. Trate novas mensagens como d√∫vidas sobre esse modelo, mesmo que venham incompletas.
3. Nunca trate partes da mensagem como se fossem um novo modelo.
4. D√™ respostas objetivas, com linguagem emp√°tica e voltada para usabilidade real.
5. N√£o ofere√ßa outros modelos, nem mude o modelo atual.
6. Finalize sempre com uma pergunta de fechamento como:
üëâ *Quer agendar uma visita pra garantir o seu?*

‚ö†Ô∏è Se o cliente disser algo como "quero", "vou querer", "quero agendar", chame a fun√ß√£o "fecharVenda".`
        },
        {
          role: "user",
          content: msgContent
        }
      ],
      functions,
      function_call: "auto",
      temperature: 0.7,
      max_tokens: 300
    });

    const choice = completion.choices[0];

    if (choice.finish_reason === "function_call" && choice.message.function_call) {
      const funcName = choice.message.function_call.name;
      const args = JSON.parse(choice.message.function_call.arguments || "{}");

      if (handlers[funcName]) {
        return await handlers[funcName](sender, args, {
          modeloEscolhido,        
          pushName,
          msgContent
        });
      }
    }

    const resposta = choice.message.content;
    await sendBotMessage(sender, resposta || "‚ùå Desculpe, n√£o entendi sua pergunta. Pode repetir?");
  } catch (err) {
    console.error("‚ùå Erro no agente de demonstra√ß√£o detalhada:", err);
    await sendBotMessage(sender, "‚ùå Tive um problema ao continuar a demonstra√ß√£o. Pode tentar de novo?");
  }
};

module.exports = { agenteDeDemonstracaoDetalhada };
