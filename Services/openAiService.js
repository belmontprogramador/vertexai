const OpenAI = require("openai");

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/**
 * üîç Gera uma pergunta para a fase de sondagem com base nas respostas anteriores
 */
const generateSurveyQuestion = async (chatHistory, userStage) => {
    const userContext = `
    O cliente j√° interagiu anteriormente. Aqui est√° o hist√≥rico:
    ${chatHistory || "Nenhuma intera√ß√£o registrada."}
    
    Ele est√° atualmente na etapa de venda: ${userStage}.
    
    Gere uma pergunta emocional e envolvente para continuar a sondagem do cliente.
    A pergunta deve considerar o est√°gio de venda e criar conex√£o emocional com o cliente.
    Use um tom humanizado, amig√°vel e persuasivo.
    `;

    return await callOpenAi(userContext, { max_tokens: 50 });
};


/**
 * üìå Gera uma mensagem de acompanhamento para engajar o cliente na conversa
 */
const generateFollowUpMessage = async (chatHistory, userStage) => {
    const userContext = `
    O cliente j√° interagiu anteriormente. Aqui est√° o hist√≥rico:
    ${chatHistory || "Nenhuma intera√ß√£o registrada."}
    
    Ele est√° atualmente na etapa de venda: ${userStage}.
    
    Gere uma resposta natural e envolvente que mantenha a conversa fluindo de forma amig√°vel e persuasiva.
    Incentive o cliente a continuar interagindo.
    `;

    return await callOpenAi(userContext, 300);
};

/**
 * üõçÔ∏è Gera uma recomenda√ß√£o de produto com base nas respostas do cliente
 */
const generateProductRecommendation = async (produtoDesejado, necessidade, investimento, chatHistory) => {
    const userContext = `
    O cliente mencionou interesse no seguinte produto: ${produtoDesejado}.
    Ele precisa desse produto para: ${necessidade}.
    O or√ßamento dispon√≠vel √©: ${investimento}.

    Aqui est√° o hist√≥rico de intera√ß√£o com o cliente:
    ${chatHistory || "Nenhuma intera√ß√£o registrada."}

    Gere uma resposta envolvente e persuasiva, destacando os benef√≠cios do produto no dia a dia do cliente.
    Finalize com uma pergunta natural que incentive o cliente a continuar interagindo antes da demonstra√ß√£o do produto.
    `;

    return await callOpenAi(userContext, 500);
};

/**
 * üî• Gera uma mensagem de fechamento para incentivar a convers√£o
 */
const generateClosingMessage = async (chatHistory) => {
    const userContext = `
    O cliente j√° demonstrou interesse nos produtos oferecidos.
    Aqui est√° o hist√≥rico de intera√ß√£o at√© o momento:
    ${chatHistory || "Nenhuma intera√ß√£o registrada."}

    Gere uma mensagem persuasiva que encoraje o cliente a tomar uma decis√£o de compra.
    Utilize um tom amig√°vel e motivador, oferecendo um benef√≠cio adicional para incentiv√°-lo a finalizar a compra.
    `;

    return await callOpenAi(userContext, 300);
};

/**
 * üéØ Chamada centralizada √† OpenAI para evitar repeti√ß√£o de c√≥digo
 */
const callOpenAi = async (userContext, maxTokens) => {
    console.log("üì° Enviando requisi√ß√£o √† OpenAI...");
    try {
        const aiResponse = await openai.chat.completions.create({
            model: "gpt-4-1106-preview",
            messages: [{ role: "system", content: userContext }],
            max_tokens: maxTokens,
        });

        if (!aiResponse.choices || aiResponse.choices.length === 0 || !aiResponse.choices[0].message) {
            console.error("‚ùå Erro ao obter resposta da OpenAI.");
            return "Desculpe, houve um problema ao processar sua solicita√ß√£o.";
        }

        return aiResponse.choices[0].message.content.trim();
    } catch (error) {
        console.error("‚ùå Erro na requisi√ß√£o OpenAI:", error.message);
        return "Erro ao gerar a resposta.";
    }
};

module.exports = {
    generateSurveyQuestion,
    generateFollowUpMessage,
    generateProductRecommendation,
    generateClosingMessage,
};
